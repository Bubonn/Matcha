{"ast":null,"code":"export function createCookie(name, value) {\n  document.cookie = name + \"=\" + value + \"; SameSite=None; secure; path=/\";\n}\nexport function deleteCookie(name) {\n  // eslint-disable-next-line\n  document.cookie = name + \"=\" + '; SameSite=None; secure; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/';\n}\nexport function getCookieByName(name) {\n  name = name + \"=\";\n  var list = document.cookie.split(';');\n  for (var i = 0; i < list.length; i++) {\n    var c = list[i];\n    while (c.charAt(0) === ' ') {\n      c = c.substring(1, c.length);\n    }\n    if (c.indexOf(name) === 0) {\n      return c.substring(name.length, c.length);\n    }\n  }\n  return null;\n}\nexport function parseJwt(token) {\n  var base64Url = token.split('.')[1];\n  var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n  var jsonPayload = decodeURIComponent(window.atob(base64).split('').map(function (c) {\n    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n  }).join(''));\n  return JSON.parse(jsonPayload);\n}\nexport function getToken() {\n  const token = getCookieByName('token');\n  if (!token) {\n    return null;\n  }\n  return token;\n}\nfunction containsUpperCase(str) {\n  const regex = /[A-Z]/;\n  return regex.test(str);\n}\nfunction containsSpecialCharacter(str) {\n  const regex = /[!@#$%^&*()_+{}[\\]:;<>,.?~\\\\|]/;\n  return regex.test(str);\n}\nfunction containsDigit(str) {\n  const regex = /\\d/;\n  return regex.test(str);\n}\n\n// eslint-disable-next-line\nexport function checkPassword(password, confPassword) {\n  setBackErr('');\n  if (!password && !confPassword) {\n    return setErr('');\n  }\n  if (password.length < 8) {\n    return setErr('Password must contain at least eight characters');\n  }\n  if (!containsUpperCase(password)) {\n    return setErr('Password must contain at least one uppercase character');\n  }\n  if (!containsSpecialCharacter(password)) {\n    return setErr('Password must contain at least one special character');\n  }\n  if (!containsDigit(password)) {\n    return setErr('Password must contain at least one digit');\n  }\n  if (password !== confPassword) {\n    return setErr('The two passwords must be the same');\n  }\n  setErr('');\n}","map":{"version":3,"names":["createCookie","name","value","document","cookie","deleteCookie","getCookieByName","list","split","i","length","c","charAt","substring","indexOf","parseJwt","token","base64Url","base64","replace","jsonPayload","decodeURIComponent","window","atob","map","charCodeAt","toString","slice","join","JSON","parse","getToken","containsUpperCase","str","regex","test","containsSpecialCharacter","containsDigit","checkPassword","password","confPassword","setBackErr","setErr"],"sources":["/Users/jb/projets/my_matcha/frontend/src/utils/auth.tsx"],"sourcesContent":["export function createCookie(name: string, value: string) {\n\tdocument.cookie = name + \"=\" + value + \"; SameSite=None; secure; path=/\";\n}\n\nexport function deleteCookie(name: string) {\n\t// eslint-disable-next-line\n\tdocument.cookie = name + \"=\" + '; SameSite=None; secure; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/';\n}\n\nexport function getCookieByName(name: string) {\n\tname = name + \"=\";\n\tvar list = document.cookie.split(';');\n\tfor (var i = 0; i < list.length; i++) {\n\t\tvar c = list[i];\n\t\twhile (c.charAt(0) === ' ') {\n\t\t\tc = c.substring(1, c.length);\n\t\t}\n\t\tif (c.indexOf(name) === 0) {\n\t\t\treturn c.substring(name.length, c.length);\n\t\t}\n\t}\n\treturn null;\n}\n\nexport function parseJwt (token: string) {\n\tvar base64Url = token.split('.')[1];\n\tvar base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n\tvar jsonPayload = decodeURIComponent(window.atob(base64).split('').map(function(c) {\n\t\treturn '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n\t}).join(''));\n\n\treturn JSON.parse(jsonPayload);\n}\n\nexport function getToken() {\n\tconst token: string | null = getCookieByName('token');\n\n\tif (!token) {\n\t\treturn null;\n\t}\n\treturn token;\n}\n\nfunction containsUpperCase(str: string) {\n\tconst regex = /[A-Z]/;\n\treturn regex.test(str);\n}\n\nfunction containsSpecialCharacter(str: string) {\n\tconst regex = /[!@#$%^&*()_+{}[\\]:;<>,.?~\\\\|]/;\n\treturn regex.test(str);\n}\n\nfunction containsDigit(str: string) {\n\tconst regex = /\\d/;\n\treturn regex.test(str);\n}\n\n// eslint-disable-next-line\nexport function checkPassword(password: string, confPassword: string,) {\n\tsetBackErr('');\n\tif (!password && !confPassword) {\n\t\treturn setErr('');\n\t}\n\tif (password.length < 8) {\n\t\treturn setErr('Password must contain at least eight characters');\n\t}\n\tif (!containsUpperCase(password)) {\n\t\treturn setErr('Password must contain at least one uppercase character');\n\t}\n\tif (!containsSpecialCharacter(password)) {\n\t\treturn setErr('Password must contain at least one special character');\n\t}\n\tif (!containsDigit(password)) {\n\t\treturn setErr('Password must contain at least one digit');\n\t}\n\tif (password !== confPassword) {\n\t\treturn setErr('The two passwords must be the same');\n\t}\n\tsetErr('');\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}